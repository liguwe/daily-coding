/*************************************************
 * n以内素数的个数
 * 判断一个数是否是素数
 ************************************************/

function fn1(n) {
    let c = 0;
    for (let i = 0; i < n; i++) {
        if (isP(i)) {
            c++
        }
    }
    return c;
}

// 判断是否是一个素数
function isP(n) {
    for (let i = 2; i * i < n; i++) {
        if (n % i === 0) {
            return true;
        }
    }
    return false;
}


/*************************************************
 * :::: 优化
 * ● 首先从 2 开始，我们知道 2 是一个素数，那么 2 × 2 = 4, 3 × 2 = 6, 4 × 2 = 8… 都不可能是素数了。
 * ● 然后我们发现 3 也是素数，那么 3 × 2 = 6, 3 × 3 = 9, 3 × 4 = 12… 也都不可能是素数了。
 *
 * 所以，找一个输在primes=[] 、primes.flll(true)  ，填充prime ，最后返回为true的个数
 ************************************************/
function fn2(n) {
    let p = new Array(n).fill(true);
    let c = 0;
    for (let i = 0; i < n; i++) {
        if (isP(i)) {
            for (let j = i; j < n; j = i + j) {
                p[j] = false
            }
        }
    }

    // todo  最后返回p中元素为true的个数

}
