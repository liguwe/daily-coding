// :::: 网络安全专题
// :::: CSRF(跨站请求伪造 (Cross-Site Request Forgery, CSRF))
/*************************************************
 *
 * // :::: 一个典型的CSRF攻击有着如下的流程：
 * 1、受害者登录a.com，并保留了登录凭证（Cookie）。
 * 2、攻击者引诱受害者访问了b.com。
 * 3、b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。
 *      => 比如，引导受害者打开新表标签页，如下：
 *        <a href="http://test.com/csrf/withdraw.php?amount=1000&for=hacker" taget="_blank">
 *          重磅消息！！
 *         <a/>
 * 4、a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。
 * 5、a.com以受害者的名义执行了act=xx。
 * 6、攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。
 *
 * // :::: 特点
 * 1、所以，首先肯定是跨域访问，比如script/img/a/form提交等
 * 2、图片URL、超链接、CORS、Form提交等等。
 * 3、部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。
 *
 * https://juejin.cn/post/7008171429845811207
 ************************************************/


/*************************************************
 * // ::::如何防范
 * 1、阻止不明外域的访问
 *      同源检测
 * 2、Samesite Cookie
 *      提交时要求附加本域才能获取的信息，
 *      Samesite=Strict|Lax，
 *
 *          Strict：举个实际的例子就是，假如淘宝网站用来识别用户登录与否的 Cookie 被设置成了 Samesite=Strict，
 *          那么用户从百度搜索页面甚至天猫页面的链接点击进入淘宝后，淘宝都不会是登录状态，
 *          因为淘宝的服务器不会接受到那个 Cookie，其它网站发起的对淘宝的任意请求都不会带上那个 Cookie
 *
 *          Lax ：如果SamesiteCookie被设置为Lax，那么其他网站通过页面跳转过来的时候可以使用Cookie，
 *          可以保障外域连接打开页面时用户的登录状态。但相应的，其安全性也比较低。
 *
 *      致命缺陷：不支持子域，就要求每个子域都需要重新登录
 * 3、CSRF Token
 *      双重Cookie验证
 *          在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如csrfcookie=v8g9e4ksfhw）。
 *          在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw）。
 *          后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。
 *          不适合多子域名场景
 *      要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token/cookie，可以存在local starage
 *  4、前端提示
 *      当前用户打开其他用户填写的链接时，需告知风险（知乎跳转外链，等等都会告知风险）。
 ************************************************/



