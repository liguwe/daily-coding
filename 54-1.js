/**
 *
 * 贪心算法
 * 跳跃游戏2
 *
 * 给你一个非负整数数组nums ，你最初位于数组的第一个位置。
 *
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 *
 * 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
 *
 * 假设你总是可以到达数组的最后一个位置。
 *
 *
 *
 * 示例 1:
 *
 * 输入: nums = [2,3,1,1,4]
 * 输出: 2
 * 解释: 跳到最后一个位置的最小跳跃数是 2。
 *     从下标为 0 跳到下标为 1 的位置，跳1步，然后跳3步到达数组的最后一个位置。
 * 示例 2:
 *
 * 输入: nums = [2,3,0,1,4]
 * 输出: 2
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode.cn/problems/jump-game-ii
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * */

/**
 * // 自顶向下的递归动态规划
 * 定义：
 * 从索引 p 跳到 n-1(最后)，至少需要 dp(nums, p) 步
 * 从索引 p-1 跳到p，   至少需要 dp(nums, p-1) 步
 * 从索引 p-2 跳到p，   至少需要 dp(nums, p-2) 步
 * ....
 * base case:
 * 从索引 0 跳到 1，至少需要 dp(nums, 0) 步
 * */



// 贪心算法解法
const fn = (nums) => {
    let n = nums.length;
    let end = 0, // end判断调完以后刚好到了具体某个元素上
        f = 0; // 最远跳多远
    let jumps = 0;
    for (let i = 0; i < n - 1; i++) {
        f = Math.max(nums[i] + i, f);
        if (end === i) {
            jumps++;
            end = f;
        }
    }
    return jumps;
}


console.log(fn([2, 3, 0, 1, 4]))
